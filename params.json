{"name":"Trespass","tagline":"> inspect beyond barriers","body":"### What it Trespass?\r\nA simple yet powerful Java library that allows on-the-fly inspection of classes' and objects' contents at runtime, regardless of declared visibility.\r\n\r\nThe implementation is based on [Java dynamic proxies] (http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html) but that's a detail that the library will keep hidden from consumers.\r\n\r\nUsing Trespass will basically involve 2 components:\r\n\r\n1. a custom interface extending `trespass.Trespasser` and declaring methods that will map to constructors, methods and/or properties, static or not, in a target class or object\r\n\r\n2. class `trespass.Factory` to dynamically create objects that will implement the declared interface and proxy calls to its target\r\n\r\n\r\n\r\n    the target class must be annotated with @ProxyClass\r\n\r\n    a method can be mapped by simply declaring a signature that's identical to target's\r\n\r\n        annotation @Cast is provided to allow mapping of target methods that receive arguments of types that are not accessible from the proxy interface\r\n\r\n    a property or constant can be mapped by declaring accessor methods (getter and setter) using standard Java Beans naming conventions\r\n\r\n        annotation @ProxyField can be used to explicitly specify the name of the target property\r\n\r\n    a constructor or static factory method can be mapped by annotating a method in the proxy interface with @DefaultInstanceProvider\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}